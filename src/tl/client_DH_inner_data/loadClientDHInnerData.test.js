import { hexToArrayBuffer } from '../../utils';
import loadClientDHInnerData from './loadClientDHInnerData';
import {
  CLIENT_DH_INNER_DATA_CONSTRUCTOR,
  CLIENT_DH_INNER_DATA_TYPE,
  CONSTRUCTOR_KEY,
  TYPE_KEY,
} from '../../constants';

describe('loadClientDHInnerData', () => {
  /* eslint-disable */
  const hexStr = '54b6436698dbdd23b56ff842c73b39d71106f5554231ece6e0081cbb4e7e997a013e43700000000000000000fe000100b6e253241252205179256e948092d565a40995a66d7dc18bee05344bfd4a87e1ccd7f6a8f63a87789cf9ab4a65777edc1a112560b88f00a42dbd9c570eca965cf956b52557ea5c7399e71c8b00cc3b08d8b4212b4b7c85c3953be4d107892d66f81503114ec158d11fbfa7d34e89454f61dd620b405ee4bfbd320f373eb6bc6a0b76944c4bd56e474fbff76e07cc6b1f73f5c40b31b88f59752b7584e1c765950850e17a6ff23f80057b94be87a24219eacdc0c043d00d17753724b492e021c9eb818440e0fef896fd0af3031da331de27d943307ff0b42403b4042180a517113215a87944cc70d594ed0335214956e4cc37f037037bfd05023636a678e5794f';
  /* eslint-enable */
  const buffer = hexToArrayBuffer(hexStr);

  it('without offset', () => {
    expect(loadClientDHInnerData(buffer)).toEqual({
      [TYPE_KEY]: CLIENT_DH_INNER_DATA_TYPE,
      [CONSTRUCTOR_KEY]: CLIENT_DH_INNER_DATA_CONSTRUCTOR,
      nonce: BigInt('0x55f50611d7393bc742f86fb523dddb98'),
      server_nonce: BigInt('0x70433e017a997e4ebb1c08e0e6ec3142'),
      retry_id: BigInt('0'),
      /* eslint-disable */
      g_b: [182,226,83,36,18,82,32,81,121,37,110,148,128,146,213,101,164,9,149,166,109,125,193,139,238,5,52,75,253,74,135,225,204,215,246,168,246,58,135,120,156,249,171,74,101,119,126,220,26,17,37,96,184,143,0,164,45,189,156,87,14,202,150,92,249,86,181,37,87,234,92,115,153,231,28,139,0,204,59,8,216,180,33,43,75,124,133,195,149,59,228,209,7,137,45,102,248,21,3,17,78,193,88,209,31,191,167,211,78,137,69,79,97,221,98,11,64,94,228,191,189,50,15,55,62,182,188,106,11,118,148,76,75,213,110,71,79,191,247,110,7,204,107,31,115,245,196,11,49,184,143,89,117,43,117,132,225,199,101,149,8,80,225,122,111,242,63,128,5,123,148,190,135,162,66,25,234,205,192,192,67,208,13,23,117,55,36,180,146,224,33,201,235,129,132,64,224,254,248,150,253,10,243,3,29,163,49,222,39,217,67,48,127,240,180,36,3,180,4,33,128,165,23,17,50,21,168,121,68,204,112,213,148,237,3,53,33,73,86,228,204,55,240,55,3,123,253,5,2,54,54,166,120,229,121,79],
      /* eslint-enable */
    });
  });

  it('with offset', () => {
    expect(loadClientDHInnerData(buffer, true)).toEqual({
      value: {
        [TYPE_KEY]: CLIENT_DH_INNER_DATA_TYPE,
        [CONSTRUCTOR_KEY]: CLIENT_DH_INNER_DATA_CONSTRUCTOR,
        nonce: BigInt('0x55f50611d7393bc742f86fb523dddb98'),
        server_nonce: BigInt('0x70433e017a997e4ebb1c08e0e6ec3142'),
        retry_id: BigInt('0'),
        /* eslint-disable */
        g_b: [182,226,83,36,18,82,32,81,121,37,110,148,128,146,213,101,164,9,149,166,109,125,193,139,238,5,52,75,253,74,135,225,204,215,246,168,246,58,135,120,156,249,171,74,101,119,126,220,26,17,37,96,184,143,0,164,45,189,156,87,14,202,150,92,249,86,181,37,87,234,92,115,153,231,28,139,0,204,59,8,216,180,33,43,75,124,133,195,149,59,228,209,7,137,45,102,248,21,3,17,78,193,88,209,31,191,167,211,78,137,69,79,97,221,98,11,64,94,228,191,189,50,15,55,62,182,188,106,11,118,148,76,75,213,110,71,79,191,247,110,7,204,107,31,115,245,196,11,49,184,143,89,117,43,117,132,225,199,101,149,8,80,225,122,111,242,63,128,5,123,148,190,135,162,66,25,234,205,192,192,67,208,13,23,117,55,36,180,146,224,33,201,235,129,132,64,224,254,248,150,253,10,243,3,29,163,49,222,39,217,67,48,127,240,180,36,3,180,4,33,128,165,23,17,50,21,168,121,68,204,112,213,148,237,3,53,33,73,86,228,204,55,240,55,3,123,253,5,2,54,54,166,120,229,121,79],
        /* eslint-enable */
      },
      offset: 304,
    });
  });
});
